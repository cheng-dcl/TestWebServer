<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!-- environments下用于配置不同数据库环境   -->
    <environments default="development">
        <environment id="development">
            <!--
              在MyBatis中有两种事务管理器类型也就是type=”[JDBC|MANAGED]”
              JDBC:这个配置直接简单使用了JDBC的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围。
              MANAGED:这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期,比如Spring或JEE应用服务器的上下文。
                默认情况下它会关闭连接。然而一些容器并不希望这样,因此如果你需要从连接中停止它,将closeConnection属性设置为false
             -->
            <transactionManager type="JDBC" />
            <!--
                数据源的配置:dataSource元素使用基本的JDBC数据源接口来配置JDBC连接对象的资源。
                许多MyBatis的应用程序将会按示例中的例子来配置数据源。然而它并不是必须的。
                要知道为了方便使用延迟加载,数据源才是必须的, 有三种内建的数据源类型:
                UNPOOLED:这个数据源的实现是每次被请求时简单打开和关闭连接。它有一点慢,这是对简单应用程序的一个很好的选择,因为它不需要及时的可用连接。不同的数据库对这个的表现也是不一样的,所以对某些数据库来说配置数据源并不重要,这个配置也是闲置的。
                POOLED:这是JDBC连接对象的数据源连接池的实现,用来避免创建新的连接实例时必要的初始连接和认证时间。这是一种当前Web应用程序用来快速响应请求很流行的方法。
                JNDI:这个数据源的实现是为了使用如Spring或应用服务器这类的容器,容器可以集中或在外部配置数据源,然后放置一个JNDI上下文的引用。
             -->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}" />
                <property name="url" value="${url}" />
                <property name="username" value="${username}" />
                <property name="password" value="${password}" />
                <property name="poolMaximumActiveConnections" value="50" /><!-- 同一时间内最大连接数 -->
                <property name="poolMaximumIdleConnections" value="10" /><!-- 连接最大空闲数目 -->
                <property name="poolMaximumCheckoutTime" value="10000" /><!-- 连接被每个任务占用的最大时间 -->
                <property name="poolTimeToWait" value="5000" /><!-- 连接池中无可用连接时，线程的等待时间 -->
                <property name="poolPingQuery" value="select now()" />
                <property name="poolPingEnabled" value="true" />
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <!-- 映射文件方式1，一个一个的配置 -->
        <mapper resource="com/cheng/mybatis/test/maps/ConfigUserMapper.xml" />
        <mapper resource="com/cheng/mybatis/test/maps/ConfigAgeMapper.xml" />


        <!-- 映射文件方式2，自动扫描包内的Mapper接口与配置文件 -->
        <!--<package name="Tmp/com/cheng/mabatis/test/maps"/>-->
    </mappers>
</configuration>